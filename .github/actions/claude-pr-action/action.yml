name: "Claude PR Composite Action"
description: "Run Claude Code on pull requests or issues when @claude is mentioned"

inputs:
  trigger_phrase:
    description: "The phrase that triggers the action"
    required: true
  timeout_minutes:
    description: "How many minutes to wait before timing out"
    required: true
  github_token:
    description: "Token for calling the GitHub API"
    required: true
  use_bedrock:
    description: "Whether to use AWS Bedrock"
    required: true
  model:
    description: "Which Claude model to use"
    required: true
  app_id:
    description: "GitHub App ID"
    required: true
  app_private_key:
    description: "GitHub App private key"
    required: true
  aws_role_to_assume:
    description: "AWS Role to assume for Bedrock"
    required: true

runs:
  using: "composite"
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate GitHub App token
      id: app-token
      uses: actions/create-github-app-token@v2
      with:
        app-id: ${{ inputs.app_id }}
        private-key: ${{ inputs.app_private_key }}


    - name: Configure AWS Credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.aws_role_to_assume }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Call Claude Model via Bedrock (Python)
      shell: bash
      run: |
        pip install boto3

        python <<EOF
        import boto3
        import json
        import os

        region = os.getenv("AWS_REGION", "us-east-1")
        model_id = os.getenv("MODEL")
        prompt = os.getenv("TRIGGER_PHRASE")

        client = boto3.client("bedrock-runtime", region_name=region)

        body = {
            "prompt": prompt,
            "max_tokens_to_sample": 512,
            "temperature": 0.7,
            "stop_sequences": ["\n\nHuman:"]
        }

        response = client.invoke_model(
            modelId=model_id,
            contentType="application/json",
            accept="application/json",
            body=json.dumps(body)
        )

        response_body = json.loads(response['body'].read().decode())
        print("Claude response:", response_body.get("completion", response_body))
        EOF
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
        MODEL: ${{ inputs.model }}
        TRIGGER_PHRASE: |
          Human: ${{ inputs.trigger_phrase }}
          Assistant:
